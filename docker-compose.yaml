version: "3.9"

services:

  db:
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL","pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./pgdata:/var/lib/postgresql/data


  redis:
    image: redis
    ports:
      - '6379:6379'
    command: /bin/bash -c "redis-server"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./config/redis:/usr/local/etc/redis


  api:
    build:
      context: .
    command: /bin/bash -c "python manage.py makemigrations && python manage.py migrate && python manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    environment:
      - DEBUG=1
      - SECRET_KEY=$SECRET_KEY
      - DJANGO_ALLOWED_HOSTS=['*']
    tty: false
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy




  celery:
    build:
      context: .
    environment:
      - DEBUG=1
      - SECRET_KEY=$SECRET_KEY
      - DJANGO_ALLOWED_HOSTS=['*']
      - CELERY_BEAT_SCHEDULER=$CELERY_BEAT_SCHEDULER
      - CELERY_BROKER_URL=$CELERY_BROKER_URL
      - CELERY_ACCEPT_CONTENT=json
      - CELERY_TASK_SERIALIZER=json
      - CELERY_RESULT_SERIALIZER=json
    ports: [ ]
    command: /bin/bash -c "celery -A config worker -l INFO"
    volumes:
      - ./project/:/usr/src/app/
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_started



volumes:
  db:
    driver: local
  redis:
    driver: local